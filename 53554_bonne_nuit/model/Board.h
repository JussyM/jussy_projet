//
// Created by justu on 18-09-21.
//

#ifndef INC_53554_BONNE_NUIT_BOARD_H
#define INC_53554_BONNE_NUIT_BOARD_H

#include <array>
#include "memory"
#include "square.h"
#include "position.h"
#include "random.hpp"

class Board {
  static const int little_pawn = 9;
  static const int big_pawn = 15;
  square squares[big_pawn][little_pawn];
  /**
   * returns a random value for the y coordinate in position
   * @return value y
   */
  static int random_y ();
  /**
   * @brief defined board according to the colors that are not used
   * simply means if all the five players are not playing
   * @param std::vector<Pawn>& the pawns created by the game
   * @param std::vector<Color>& the colors not used
   * @param int the number of pawn
   */
  static void defined_colors_not_used (std::vector<Pawn> &, std::vector<Color> &, int);
  /**
   * @brief defined board according to the colors that are used
   * simply means defined the colors for the players
   * @param std::vector<Color>& the colors not used
   * @param std::vector<Color>& the colors used (empty vector)
   */
  static void defined_colors_used (std::vector<Color> &, std::vector<Color> &);
/**
 * @brief defined each square with the pawn available
 * @param std::vector<Pawn>& the pawns that exist and used
 * @param int nb_pawns the number of pawns
 * @param int index_2 another index for the calculation
 */
  void defined_squares_with_remains_colors (std::vector<Pawn> &, int &, int &);
  /**
   *@brief defined the square for each player with color used
   * @param color_used vector of colors that are used by the players
   * @param int index for calculation
   */
  void defined_players_square (std::vector<Color> &color_used, int);
/**
 *@brief defined the default state for the square that are not used
 * @param color_used vector of colors
 */
  void defined_default_square_state (std::vector<Color> &color_used);
 public:
  /**
   * Default constructor generated by the compiler
   */
  Board () = default;

  /**
   * return a Pawn at a position given by argument
   * @param position pointer to an object position
   * @return a ref Pawn Object
   */
  Pawn &get_pawn_at (position position);

  /**
   * @brief Creat the board object
   * according to the
   * remaining Pawn given as
   * argument using vector container
   * if the vector is empty the the bord
   * will be created with default square
   * without Pawn
   * @param vector of pawn created by the game given by ref as an argument
   */
  void create_board (std::vector<Pawn> &);

  /**
   * Default destructor ( i'm not sure it will be useful)
   */
  ~Board () = default;

/**
 *  return a holl row according to the index
 * @param index to specified the row we need
 * @return and array 1D of square*
 */
  square *get_rows_at (int index);

  /**
   *  return a square* from a specified position
   * @return square*
   */
  square &get_square_at (position &);

/**
 *  return true if a position is valid or inside the main board
 * @return bool
 */
  static bool is_inside (position);

/**
 *  getter for the little_pawn value
 * @return  Integer
 */
  static int get_little_pawn ();
/**
*  getter for the big_pawn value
* @return Integer
*/
  static int get_big_pawn ();
/**
 * return true if the rows are free
 * @param rows square*
 * @return bool
 */
  static bool rows_are_free (square *rows);

};

#endif //INC_53554_BONNE_NUIT_BOARD_H
